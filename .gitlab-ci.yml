## -----------------------------------------------------------------------------
## GitLab CI configuration file
##
## @author     Lars Thoms <lars@thoms.io>
## @date       2023-05-25
## -----------------------------------------------------------------------------

---
## -----------------------------------------------------------------------------
## Configuration
## -----------------------------------------------------------------------------

variables:
  NAME: hls-utils
  PACKAGE_BASE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages"
  PACKAGES_URL: "${PACKAGE_BASE_URL}/generic/${NAME}/${CI_COMMIT_TAG}"
  GOPATH: "${CI_PROJECT_DIR}/.go"

default:
  image: alpine
  tags: [dl.min]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
  artifacts:
    when: always
    expire_in: 1h

stages:
  - test
  - build
  - deploy
  - release


## -----------------------------------------------------------------------------
## Test
## -----------------------------------------------------------------------------

test-go 1/2:
  stage: test
  image: golang:alpine
  artifacts:
    reports:
      junit: report.xml
  before_script:
    - go install gotest.tools/gotestsum@latest
  script:
    - '"${GOPATH}/bin/gotestsum" --junitfile report.xml --format testname'

test-go 2/2:
  stage: test
  image: golangci/golangci-lint
  artifacts:
    reports:
      junit: report.xml
  script:
    - golangci-lint run --out-format junit-xml --allow-parallel-runners > report.xml

test-yaml:
  stage: test
  image: python:alpine
  artifacts:
    reports:
      junit: report.xml
  before_script:
    - pip install yamllint yamllint-junit
  script:
    - yamllint -f parsable **.yaml | yamllint-junit -o report.xml


## -----------------------------------------------------------------------------
## Build
## -----------------------------------------------------------------------------

build-go-dependencies:
  stage: build
  image: golang:alpine
  script:
    - go mod download
  cache:
    paths:
      - .go/pkg/mod/

build-go-alpine:
  stage: build
  image: golang:alpine
  needs:
    - build-go-dependencies
  cache:
    paths:
      - .go/pkg/mod/
  artifacts:
    paths:
      - bin/
  parallel:
    matrix:
      - GOOS: linux
        GOARCH: &ARCH [386, amd64, arm, arm64]
  before_script:
    - apk add --no-cache curl
  script:
    - go build -a -buildmode=exe -trimpath -o "bin/${NAME}_${GOOS}-${GOARCH}-musl"

build-go-debian:
  stage: build
  image: golang:bullseye
  needs:
    - build-go-dependencies
  cache:
    paths:
      - .go/pkg/mod/
  artifacts:
    paths:
      - bin/
  parallel:
    matrix:
      - GOOS: darwin
        GOARCH: [amd64, arm64]
      - GOOS: freebsd
        GOARCH: &ARCH [386, amd64, arm, arm64]
      - GOOS: linux
        GOARCH: *ARCH
  script:
    - go build -a -buildmode=exe -trimpath -o "bin/${NAME}_${GOOS}-${GOARCH}"


## -----------------------------------------------------------------------------
## Deploy
## -----------------------------------------------------------------------------

deploy:
  stage: deploy
  needs:
    - job: build-go-alpine
      artifacts: true
    - job: build-go-debian
      artifacts: true
  script:
    - >-
      for FILE in bin/*; do
        curl -H "JOB-TOKEN: ${CI_JOB_TOKEN}" -T "${FILE}" "${PACKAGES_URL}/${FILE}"
      done
  rules:
    - if: $CI_COMMIT_TAG


## -----------------------------------------------------------------------------
## Release
## -----------------------------------------------------------------------------

create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: deploy
      artifacts: false
  before_script:
    - apk add --no-cache git
  script:
    - >-
      git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty="format:%s"
      | sort -u
      | sed -e 's/^/- /'
      > release-description.txt
  release:
    name: "Version ${CI_COMMIT_TAG}"
    tag_name: "${CI_COMMIT_TAG}"
    description: release-description.txt
    ref: "${CI_COMMIT_SHA}"
  rules:
    - if: $CI_COMMIT_TAG
...
